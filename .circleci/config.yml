version: 2.1
orbs:
  anima-orb: anima/anima-orb@dev:alpha
workflows:
  scooby:
    jobs:
      - build-and-test:
          context: anima-prod

      - run-scooby-regression-tests:
          context: anima-prod
      - run-scooby-fidelity-tests:
          context: anima-prod
      - scooby-update-github-status:
          context: anima-prod
          requires:
            - run-scooby-regression-tests
            - run-scooby-fidelity-tests

      - deploy-scooby-web-ui:
          context: anima-prod
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main

      - request-npm-packages-deploy-approval:
          type: approval
          requires:
            - build-and-test
          filters:
            branches:
              only: main
      # This workaround is used to patch this CircleCI behavior: https://circleci.canny.io/cloud-feature-requests/p/show-overall-all-checks-have-passed-status-in-github-even-on-builds-with-incompl
      - patch-request-npm-packages-deploy-approval-github-status:
          context: anima-prod
          requires:
            - build-and-test
          filters:
            branches:
              only: main
      - deploy-npm-packages:
          context: anima-prod
          requires:
            - request-npm-packages-deploy-approval
jobs:
  build-and-test:
    docker:
      - image: node:16
    steps:
      - setup-dependencies
      - run:
          name: "Build monorepo"
          command: "yarn build:all"
      - run:
          name: "Run tests"
          command: "./scripts/run_all_tests.sh"
      - run:
          name: "Check formatting"
          command: "yarn check:format"

  run-scooby-regression-tests:
    docker:
      - image: node:16
    steps:
      - setup-dependencies
      - setup-scooby
      - run:
          name: "Run HTML regression test"
          command: "scooby regression --name 'html-regression' --tests sample-projects/ci-html-regression"
      - run:
          name: "Run PNG regression test"
          command: "scooby regression --name 'png-regression' --tests sample-projects/ci-png-regression"

  run-scooby-fidelity-tests:
    docker:
      - image: node:16
    steps:
      - setup-dependencies
      - setup-scooby
      - run:
          name: "Run HTML fidelity test"
          command: "scooby fidelity --name 'html-fidelity' --expected sample-projects/ci-html-fidelity/expected --actual sample-projects/ci-html-fidelity/actual"

  scooby-update-github-status:
    docker:
      - image: node:16
    steps:
      - setup-dependencies
      - setup-scooby
      - run:
          name: "Update GitHub status"
          command: "scooby update-github-status"

  deploy-scooby-web-ui:
    docker:
      - image: node:16
    steps:
      - setup-dependencies
      - run:
          name: "Build Scooby Web"
          command: "yarn web build"
      - run:
          name: Install deploy dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build@animaapp.com"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "ed:65:07:95:99:35:d0:fb:3c:38:82:39:db:2a:98:ee"
      - run:
          name: "Add Jekyll disable file"
          command: "touch ./packages/scooby-web/dist/.nojekyll"
      - run:
          name: Deploy Scooby Web to gh-pages branch
          command: gh-pages --dotfiles --message '[skip ci] updates' --dist ./packages/scooby-web/dist

  deploy-npm-packages:
    docker:
      - image: node:16
    steps:
      - setup-dependencies
      - add_ssh_keys:
          fingerprints:
            - "ed:65:07:95:99:35:d0:fb:3c:38:82:39:db:2a:98:ee"
      - run:
          name: "Setting up bot account for PR creation"
          command: |
            git config user.email "federico+ci_bot@animaapp.com"
            git config user.name "Anima CI Bot"
      - run:
          name: "Preparing repo for package publish"
          command: |
            git checkout -b "chore/release-$CIRCLE_WORKFLOW_JOB_ID"
            git push --set-upstream origin "chore/release-$CIRCLE_WORKFLOW_JOB_ID"
      - run:
          name: "Build monorepo"
          command: "yarn build:all"
      - run:
          name: "Preparing packages"
          command: "yarn release:prepare:ci"
      - run:
          name: "Publishing packages"
          command: "yarn release:publish:ci"
      - run:
          name: "Creating PR"
          command: |
            git push
            BRANCH_ID="chore/release-$CIRCLE_WORKFLOW_JOB_ID"
            curl \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_CI_BOT_TOKEN" \
              "https://api.github.com/repos/AnimaApp/scooby/pulls" \
              -d "{\"title\":\"chore: release\",\"body\":\"Package release automatically generated by CI\",\"head\":\"$BRANCH_ID\",\"base\":\"main\"}"

  patch-request-npm-packages-deploy-approval-github-status:
    docker:
      - image: node:16
    steps:
      - checkout
      - run:
          name: "Install Ubuntu dependencies"
          command: |
            apt-get -y update
            apt-get install -y jq curl
      - run:
          name: "Patching Approval status"
          command: |
            ./scripts/patch_pending_circleci_approval.sh "request-npm-packages-deploy-approval"

commands:
  setup-dependencies:
    steps:
      - run:
          name: Set npm registry
          command: |
            echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
            echo "@animaapp:registry=https://npm.pkg.github.com/" >> ~/.npmrc
            echo "//npm.pkg.github.com/:_authToken=\${GITHUB_PACKAGE_TOKEN}" >> ~/.npmrc
      - checkout
      - run:
          name: "Install dependencies"
          command: "yarn install --frozen-lockfile"
      - run:
          name: "Install Ubuntu dependencies"
          command: |
            apt-get -y update
            apt-get install -y libasound2 libgconf-2-4 libatk1.0-0 libatk-bridge2.0-0 libgdk-pixbuf2.0-0 libgtk-3-0 libgbm-dev libnss3-dev libxss-dev chromium jq curl rsync

  setup-scooby:
    steps:
      - run:
          name: "Build Scooby CLI"
          command: "yarn cli build"
      - run:
          name: "Setup snoopy alias"
          command: |
            ln -s $(pwd)/packages/scooby-cli/bin/run /usr/bin/scooby
